n=31
p=expected no. of days a normal user falls outside of 95% CI.
p=0.05
pbinom(size=n,prob=p,0.75)
pbinom(size=n,prob=p,1)
pbinom(size=n,prob=p,2)
pbinom(size=n,prob=p,4)
1-pbinom(size=n,prob=p,4)
1-pbinom(size=n,prob=p,5)
1-pbinom(size=n,prob=p,1)
1-pbinom(size=n,prob=p,2)
1-pbinom(size=n,prob=p,3)
1-pbinom(size=n,prob=p,4)
1-pbinom(size=n,prob=p,5)
1-pbinom(size=n,prob=p,10)
0.00004*300
0.00004*300/7340
0.00004*300/7340*100
0.00000149*7350
0.000031*325
0.00038*325
0.00001544*7300
list.of.packages <- c("tidyverse", "stringr","data.table","sqldf","RecordLinkage")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
# exploratory data analysis
library(tidyverse)
library(dplyr)
library(stringr)
library(data.table)
library(sqldf)
library(RecordLinkage)
q()
require(Matrix)
ff <- log(Volume) ~ log(Height) + log(Girth)
utils::str(m <- model.frame(ff, trees))
mat <- model.matrix(ff, m)
str(Volume)
ff1<-log(Volume)+log(Height)+log(Girth)
ff1<-log(Volume)~log(Height)+log(Girth)
ff1
dim(trees)
trees
1/1900
186000/1900
186000000/1900
186000000/1900*900
lists=list();
n=10
for(i in 1:10)
{
lists[[i]]=rnorm(i)
}
lists
unlist(lists)
lists=list(); n=10;
for(i in 1:10)
{
lists[[i]]=list(rnorm(i))
}
lists
list(rnorm(10))
dim(data17)
require(jsonlite)
id = "Ya2elsR5s5s"
url = paste0("https://gdata.youtube.com/feeds/api/videos/", id, "?v=2&alt=json")
raw.data <- readLines(url, warn = "F")
rd <- fromJSON(raw.data)
term <- rd$entry$category$term[2]
label <- rd$entry$category$label[2]
title <- rd$entry$title
author <- rd$entry$author[1]
duration <- rd$entry$`media$group`$`media$content`$duration[1]
options(stringsAsFactors=FALSE)
x <- data.frame(driver = c("Bowser", "Peach"), occupation = c("Koopa", "Princess"))
x <- data.frame(driver = c("Bowser", "Peach"), occupation = c("Koopa", "Princess"))
x$vehicle <- data.frame(model = c("Piranha Prowler", "Royal Racer"))
x$vehicle$stats <- data.frame(speed = c(55, 34), weight = c(67, 24), drift = c(35, 32))
str(x)
str(flatten(x))
str(flatten(x, recursive = FALSE))
data1 <- fromJSON("https://api.github.com/users/hadley/repos")
colnames(data1)
colnames(data1$owner)
colnames(flatten(data1))
data2 <- fromJSON("https://api.github.com/users/hadley/repos", flatten = TRUE)
colnames(data2)
myjson <- toJSON(cars)
cat(myjson)
prettify(myjson)
minify(myjson)
dat1 <- data.frame(labels = rep(1, 3), predictions = rep(43, 3))
dat2 <- data.frame(labels = c(rep(1, 5), 0),
predictions = c(43, 21, 43, 43, 24, 24))
dat1
dat2
dat <- list(HIV = 1:2, data = list(dat1, dat2))
dat # nested data frame, using the "tidyr" package definition of "nest"
attr(dat, "row.names") <- 1:2
dat # nested data frame, using the "tidyr" package definition of "nest"
class(dat) <- c("tbl_df", "data.frame")
dat # nested data frame, using the "tidyr" package definition of "nest"
str(dat)
require(data.table)
DT = data.table(A=c(2,5.6,-3),B=list(1:3,c("foo","A,Name","bar"),round(pi*1:3,2)))
fwrite(DT)
DT
fwrite(DT, sep="|", sep2=c("{",",","}"))
a11=fwrite(DT, sep="|", sep2=c("{",",","}"))
dim(a11)
a11=fwrite(DT,  sep2=c("{",",","}"))
fwrite(DT, sep=" ", sep2=c("{",",","}"))
fwrite(DT, sep=" ", sep2=c("{",",","}"),"a11.csv")
dt=fread("a11.csv")
dt
typeof(dt$B)
typeof(dt$B[1])
dt$B[1]
fwrite(DT, sep=" ", sep2=c("",",",""),"a11.csv")
dt=fread("a11.csv")
dt
typeof(dt$B[1])
dt$B[1]
unlist(dt$B[1])
install.packages("combinat")
require(combinat)
permn(3)
combn(3)
combn(3,2)
combn(4,2)
combn(("a","b","c"),2)
combn(c("a","b","c"),2)
combn(c("a","b","c"),3)
combn(c("a","b","c"),1)
combn(c("a","b","c"),1)
permn(c("a","b","c"),1)
permn(c("a","b","c"))
typeof(c("a","b","c"))
permn(c(1,2,3))
x=c(1,2,3,4,5,6)
p=combinat::permn(x);
seq0=seq(1,length(p)-1,length(x)-1);
p
seq0
a=p[seq0]
a
seq0=seq(1,length(p)-length(x)+1,length(x));
a=p[seq0]
a
permn(c(1,2,3,4))
x=c(1,2,3,4)
p=combinat::permn(x);
p
as.matrix(unlist(p),nrows=length(p),byrow=TRUE)
length(p)
as.matrix(unlist(p),nrows=length(p),ncol=length(x),byrow=TRUE)
as.matrix(unlist(p),nrows=length(p),ncols=length(x),byrow=TRUE)
p
as.data.frame(p)
as.data.frame(as.matrix(c(unlist(p)),nrows=length(p),byrow=TRUE))
l <- replicate(
132,
list(sample(letters, 20)),
simplify = FALSE
)
l
l <- replicate(
10,
list(sample(letters, 5)),
simplify = FALSE
)
l
df <- data.frame(matrix(unlist(l), nrow=132, byrow=T))
df <- data.frame(matrix(unlist(l), nrow=10, byrow=T))
df
matrix(unlist(p),nrows=length(p),byrow=T)
p
length(p)
data.frame(matrix(unlist(p),nrow=length(p),byrow=T))
df=arrange(data.frame(matrix(unlist(p),nrow=length(p),byrow=T)),"X1")
require(dplyr)
df=arrange(data.frame(matrix(unlist(p),nrow=length(p),byrow=T)),"X1")
df=arrange(data.frame(matrix(unlist(p),nrow=length(p),byrow=T)),X1)
df
fact(3)
seq0=seq(1,length(p)-length(x)+1,combinat::fact(length(x)-1));
seq0
df0=df[seq0,]
df0
uniq_permn=function(x)
{
p=combinat::permn(x);
df=arrange(data.frame(matrix(unlist(p),nrow=length(p),byrow=T)),X1)
seq0=seq(1,length(p)-length(x)+1,combinat::fact(length(x)-1));
df0=df[seq0,]
return(df0)
}
ls()
rm(list=ls())
uniq_permn=function(x)
{
p=combinat::permn(x);
df=arrange(data.frame(matrix(unlist(p),nrow=length(p),byrow=T)),X1)
seq0=seq(1,length(p)-length(x)+1,combinat::fact(length(x)-1));
df0=df[seq0,]
return(df0)
}
ls()
x=c(1,2,4,5,6,7)
uniq_permn((x))
x=c(1,2,3)
uniq_permn(x)
p=combinat::permn(x);
df=arrange(data.frame(matrix(unlist(p),nrow=length(p),byrow=T)),X1)
seq0=seq(1,length(p)-length(x)+1,combinat::fact(length(x)-1));
df0=df[seq0,]
p
seq0
length(p)-length(x)+1
seq0=seq(1,length(p),combinat::fact(length(x)-1));
seq0
x=c(1,2,3,4,5,6)
df=arrange(data.frame(matrix(unlist(p),nrow=length(p),byrow=T)),X1)
seq0=seq(1,length(p),combinat::fact(length(x)-1));
seq0
p=combinat::permn(x);
df=arrange(data.frame(matrix(unlist(p),nrow=length(p),byrow=T)),X1)
seq0=seq(1,length(p),combinat::fact(length(x)-1));
df0=df[seq0,]
df0
seq0
sapply(arb,uniq_permn)
arb=list(c(1,2,3),c(7,9,10))
sapply(arb,uniq_permn)
arb
uniq_permn=function(x)
{
x=unlist(x);
p=combinat::permn(x);
df=arrange(data.frame(matrix(unlist(p),nrow=length(p),byrow=T)),X1)
seq0=seq(1,length(p),combinat::fact(length(x)-1));
df0=df[seq0,]
return(df0)
}
arb=list(c(1,2,3),c(7,9,10))
sapply(arb,uniq_permn)
arb
arb[[1]]
uniq_permn(arb[[1]])
uniq_permn(arb[[2]])
uniq_permn=function(x)
{
x=unlist(x);
p=combinat::permn(x);
df=arrange(data.frame(matrix(unlist(p),nrow=length(p),byrow=T)),X1)
seq0=seq(1,length(p),combinat::fact(length(x)-1));
df0=df[seq0,]
return(df0)
}
sapply(arb,uniq_permn)
12970000*0.0000385
1/0.00003171
a1="0x9b05ef15cf673e9600bbf227a0f9f2014cc518a9"
a2="0x9b05ef15cf673e9600bbf227a0f9f2014cc518a9"
a1==a1
a1==a2
b <- 4
f <- function (a)
{
b <- 3
b^3 + g (a)
}
g <- function (a)
{
a*b
}
f(2)
require(ISLR)
library(MASS)
fix(Boston)
install.packages("XQuartz")
library(ISLR)
library(MASS)
fix(Boston)
log(e)
log(exp(1))
log(2)/1-(log(2))
log(2)/(1-(log(2)))
setwd("/Users/amaurya/Desktop/Candidates/GA_data_science_challenge_V3/")
require(data.table)
a=fread("transaction_data.csv")
head(a)
head(a[!a$recipient_phone_number==""])
